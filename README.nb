Notebook[{

Cell[CellGroupData[{
Cell["\<\
Tutorial: Primer design for high-throughput cysteine mutagenesis\
\>", "Title",ExpressionUUID->"1674bd42-439e-47ab-b757-9eb99410a72c"],

Cell[TextData[{
 "High-throughput mutagenesis is a very useful tool for setting up cysteine \
cross-linking screens. This tutorial shows how to automatically design \
primers for mutating hundreds of residues in the ",
 StyleBox["smc",
  FontSlant->"Italic"],
 " gene of ",
 StyleBox["B. subtilis",
  FontSlant->"Italic"],
 " to cysteine. Most of the code resides in the accompanying ",
 StyleBox["CysteineScreen",
  FontWeight->"Bold"],
 " Wolfram Language package."
}], "Text",ExpressionUUID->"f8deda4a-1ffe-4375-97a5-ba181e0202da"],

Cell[CellGroupData[{

Cell["Package installation", \
"Section",ExpressionUUID->"cc8ec09e-f553-47c3-b806-a12d5adb3ff6"],

Cell["\<\
Make sure that the package folder containing this notebook has been placed in \
the directory opened by\
\>", "Text",ExpressionUUID->"fc6ad183-ddc1-4808-99ba-3c1e1d48aacb"],

Cell[BoxData[
 RowBox[{"SystemOpen", "@", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{"$UserBaseDirectory", ",", " ", "\"\<Applications\>\""}], "}"}], 
   "]"}]}]], "Code",
 InitializationCell->False,
 CellLabel->"In[1]:=",ExpressionUUID->"62355406-7578-4c66-bfeb-45c9481ed716"],

Cell[TextData[{
 "Alternatively, you can download the .paclet file from the ",
 StyleBox["CysteineScreen",
  FontWeight->"Bold"],
 " release tab on GitHub and install it like this:"
}], "Text",ExpressionUUID->"10157ee0-4627-4874-928a-16013083ba9e"],

Cell[BoxData[
 RowBox[{"PacletInstall", "[", "\"\<please/enter/path/to/.paclet\>\"", 
  "]"}]], "Code",
 InitializationCell->
  False,ExpressionUUID->"598b9ddd-0aa9-48b7-8b87-5fa709d2a27a"],

Cell["Now load the package:", \
"Text",ExpressionUUID->"8133491d-2a50-4937-947d-83eaaf23e9b6"],

Cell[BoxData[
 RowBox[{"<<", " ", "CysteineScreen`"}]], "Code",
 InitializationCell->False,
 CellLabel->"In[2]:=",ExpressionUUID->"f47db6ac-22b0-4e6e-a903-316c9d2a1354"],

Cell["The package exposes a single function:", \
"Text",ExpressionUUID->"104737c9-3ee2-4fe7-9b24-4f899dcc520b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", " ", "\"\<CysteineScreen`*\>\""}]], "Code",
 InitializationCell->False,
 CellLabel->"In[3]:=",ExpressionUUID->"fbf97999-6e4c-4231-aa43-a79f276e923a"],

Cell[BoxData["\<\"mutagenesisPrimerPair[\\\"cds\\\", res, codon] gives PCR \
primers for mutagenesis of a residue using a specified codon.\"\>"], "Print", \
"PrintUsage",
 CellTags->
  "Info33744054979-4052257",ExpressionUUID->"b6ccd879-3202-4180-8df7-\
dd18b20f9a2b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mutagenesis strategy", \
"Section",ExpressionUUID->"7d58a7b9-d798-41cf-8a01-5503adcbfad8"],

Cell[TextData[{
 "We will generate primers for mutating more than 400 individual coiled-coil \
residues of the Smc protein to cysteine. The targeted region of the ",
 StyleBox["smc",
  FontSlant->"Italic"],
 " gene will be split into two fragments. The first fragment is generated by \
PCR with a \[OpenCurlyDoubleQuote]constant\[CloseCurlyDoubleQuote] forward \
primer and a \[OpenCurlyDoubleQuote]variable\[CloseCurlyDoubleQuote] reverse \
primer. The second fragment is generated with a variable forward primer and a \
constant reverse primer. Matching PCR fragments are joined by Golden Gate \
assembly using ",
 StyleBox["Bsa",
  FontSlant->"Italic"],
 "I sites in the variable primers. Their ",
 StyleBox["Bsa",
  FontSlant->"Italic"],
 "I overhangs contain the cysteine mutation and are constrained to GTGC or \
TTGC to reduce variations in ligation efficiency.  For some positions, this \
requires recoding of the codon upstream of the mutation. The ",
 StyleBox["CysteineScreen",
  FontWeight->"Bold"],
 " package will take care of this. The two constant primers are used to clone \
the recombinant DNA into a gene targeting construct and are designed manually \
(not covered here)."
}], "Text",ExpressionUUID->"4211cd8d-51b2-4b39-b5bb-973d13391261"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Choosing target residues", \
"Section",ExpressionUUID->"8ecc6395-af0e-4777-ac04-23b7170bd3de"],

Cell[TextData[{
 "First, let\[CloseCurlyQuote]s construct a list of residue numbers that we \
want to mutate to cysteine. We will target residues in the Smc coiled-coil \
arm. The arm is an antiparallel intramolecular coiled coil, which means that \
it is comprised of an N-terminal and a C-terminal helix that follow the \
canonical heptad repeat pattern of coiled coils. We will mutagenize the \
residues that do not mediate a contact between the helices, i.e. which are \
not at the ",
 StyleBox["a",
  FontWeight->"Bold"],
 " and ",
 StyleBox["d",
  FontWeight->"Bold"],
 " positions of the heptad repeat."
}], "Text",ExpressionUUID->"c5ef56bd-7055-460a-989a-cc3b2085c46f"],

Cell["\<\
Let\[CloseCurlyQuote]s define a function that takes a residue range and a \
starting heptad position and writes out each residue together with its heptad \
position:\
\>", "Text",ExpressionUUID->"bacff036-b9bc-41cd-8c07-bb588baf1bd8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"heptadTable", "[", 
    RowBox[{"start_", ",", " ", "stop_", ",", " ", "heptad_"}], "]"}], ":=", 
   "\[IndentingNewLine]", "  ", 
   RowBox[{"With", "[", "\[IndentingNewLine]", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
       RowBox[{"residues", " ", "=", " ", 
        RowBox[{"Range", "[", 
         RowBox[{"start", ",", " ", "stop"}], "]"}]}], ",", "\n", "      ", 
       RowBox[{"hpos", " ", "=", " ", 
        RowBox[{"FirstPosition", "[", 
         RowBox[{
          RowBox[{"CharacterRange", "[", 
           RowBox[{"\"\<a\>\"", ",", " ", "\"\<g\>\""}], "]"}], ",", " ", 
          "heptad"}], "]"}]}]}], "\n", "    ", "}"}], "\[IndentingNewLine]", 
     "    ", ",", "\[IndentingNewLine]", "    ", 
     RowBox[{
      RowBox[{"Riffle", "[", "\n", "      ", 
       RowBox[{"residues", ",", "\n", "      ", 
        RowBox[{"RotateLeft", "[", 
         RowBox[{
          RowBox[{"CharacterRange", "[", 
           RowBox[{"\"\<a\>\"", ",", " ", "\"\<g\>\""}], "]"}], ",", " ", 
          RowBox[{"hpos", " ", "-", " ", "1"}]}], "]"}], ",", " ", "\n", 
        "      ", 
        RowBox[{"{", 
         RowBox[{"2", ",", " ", 
          RowBox[{"2", " ", "*", " ", 
           RowBox[{"Length", "@", "residues"}]}], ",", " ", "2"}], "}"}]}], 
       "\n", "     ", "]"}], "\n", "       ", "//", " ", 
      RowBox[{
       RowBox[{"Partition", "[", 
        RowBox[{"#", ",", " ", "2"}], "]"}], "&"}]}]}], "\[IndentingNewLine]",
     "  ", "]"}]}], ";"}]], "Code",
 InitializationCell->
  False,ExpressionUUID->"2d74fa04-0de2-45e0-8497-2b43e8c3d9a8"],

Cell["\<\
We use this function and knowledge about the coiled-coil register to assign \
heptad positions to Smc residues:\
\>", "Text",ExpressionUUID->"04af74a5-a05d-4182-9071-3f95dc90d2df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"heptadPositions", " ", "=", " ", "\[IndentingNewLine]", "  ", 
   RowBox[{"Join", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", "    ", 
     RowBox[{
      RowBox[{"heptadTable", "[", 
       RowBox[{"174", ",", " ", "209", ",", " ", "\"\<a\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"heptadTable", "[", 
       RowBox[{"227", ",", " ", "381", ",", " ", "\"\<a\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"heptadTable", "[", 
       RowBox[{"395", ",", " ", "493", ",", " ", "\"\<d\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"heptadTable", "[", 
       RowBox[{"679", ",", " ", "777", ",", " ", "\"\<a\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"heptadTable", "[", 
       RowBox[{"794", ",", " ", "948", ",", " ", "\"\<d\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"heptadTable", "[", 
       RowBox[{"990", ",", " ", "1025", ",", " ", "\"\<d\>\""}], "]"}]}], 
     "\[IndentingNewLine]", "  ", "}"}]}]}], ";"}]], "Code",
 InitializationCell->False,
 CellLabel->"In[5]:=",ExpressionUUID->"a1edc7d7-4723-42bc-afcc-aa40e57a9e5a"],

Cell[TextData[{
 "Now we use pattern matching to select residues that are not at positions ",
 StyleBox["a",
  FontWeight->"Bold"],
 " or ",
 StyleBox["d",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"da7705bb-8f6c-4d61-a568-9b6f835fa17c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"targets", " ", "=", "\[IndentingNewLine]", "  ", 
   RowBox[{"heptadPositions", " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", " ", 
         RowBox[{"\"\<a\>\"", " ", "|", " ", "\"\<d\>\""}]}], "}"}], " ", "->",
        " ", "Nothing"}], ",", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"res_Integer", ",", " ", "_"}], "}"}], " ", ":>", " ", 
       "res"}]}], "}"}]}]}], ";"}]], "Code",
 InitializationCell->False,
 CellLabel->"In[6]:=",ExpressionUUID->"785b3229-cf24-49a8-a2d0-2b6e87e97e41"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Automated design of the variable primers", \
"Section",ExpressionUUID->"545f83f3-843c-4543-a0ef-bd04a9e134e8"],

Cell[TextData[{
 "We make use of the ",
 StyleBox["mutagenesisPrimerPair",
  FontWeight->"Bold"],
 " function from the ",
 StyleBox["CysteineScreen",
  FontWeight->"Bold"],
 " package to design the variable forward and reverse primers. The function \
takes the sequence template, the target residue and a substitution codon (\
\[OpenCurlyDoubleQuote]TGC\[CloseCurlyDoubleQuote] for cysteine in our case). \
It returns the parts of the forward and reverse primers that contain the \
homology regions plus a 5\[CloseCurlyQuote] extension which introduces the \
mutation. The function does not add ",
 StyleBox["Bsa",
  FontSlant->"Italic"],
 "I restriction sites, so we need to take care of this.\n\nThe ",
 StyleBox["mutagenesisPrimerPair",
  FontWeight->"Bold"],
 " function adheres to the following rules:"
}], "Text",ExpressionUUID->"d555b18c-d7df-4872-8bea-5d76832b3f9e"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["If required, use an alternative codon upstream of the mutation to \
give a GTGC or TTGC overhang upon ", "Subitem"],
 StyleBox["Bsa", "Subitem",
  FontSlant->"Italic"],
 StyleBox["I cleavage.", "Subitem"]
}], "Item",ExpressionUUID->"83fb8745-f9c9-4a0a-befe-ba5fd95810f2"],

Cell[TextData[StyleBox["If possible, have a homolgy region with a melting \
temperature of more than 50 \[Degree]C.", "Subitem"]], \
"Item",ExpressionUUID->"c9afa179-f2c2-4eb1-8cf9-72cb3e5e8887"],

Cell[TextData[StyleBox["If possible, avoid self-complementarity of the last \
4-17 bases.", "Subitem"]], \
"Item",ExpressionUUID->"d0a684d5-8360-4997-8e3f-35efcd1c415a"],

Cell[TextData[StyleBox["If possible, do not end in GC clamps.", "Subitem"]], \
"Item",ExpressionUUID->"e3df5765-62e9-42db-bb14-5a4fa0a91989"],

Cell[TextData[StyleBox["If possible, do not end with T.", "Subitem"]], \
"Item",ExpressionUUID->"372e5845-d44f-478f-b666-453952fdd063"],

Cell[TextData[StyleBox["If possible, have at least one G/C within the last \
four bases.", "Item"]], \
"Item",ExpressionUUID->"92ed3ed9-75aa-4761-8ace-54813c242fa8"]
}, Open  ]],

Cell["\<\
First, we load the coding sequence for a cysteine free variant of the Smc \
protein: \
\>", "Text",ExpressionUUID->"c915dbd3-58f1-44ff-8c85-ff41efe3de20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"smc", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
        "\"\<ExampleData\>\"", ",", " ", "\"\<BsSmc_cysless.txt\>\""}], "}"}],
       "]"}], ",", " ", "\"\<Text\>\""}], "]"}]}], ";"}]], "Code",
 InitializationCell->False,
 CellLabel->"In[7]:=",ExpressionUUID->"3c267b9b-e795-45e5-8f95-b33c6e8d6a48"],

Cell["Now we construct primers for the target residues:", \
"Text",ExpressionUUID->"464f8467-7690-4439-b579-dea228d35d92"],

Cell[BoxData[
 RowBox[{
  RowBox[{"primers", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"mutagenesisPrimerPair", "[", 
      RowBox[{"smc", ",", " ", "#", ",", " ", "\"\<TGC\>\""}], "]"}], "&"}], 
    " ", "/@", " ", "targets"}]}], ";"}]], "Code",
 InitializationCell->False,
 CellLabel->"In[8]:=",ExpressionUUID->"289c0148-2623-485a-b017-bcdf565025b1"],

Cell[TextData[{
 "The primers are still missing the ",
 StyleBox["Bsa",
  FontSlant->"Italic"],
 "I recognition site. Let\[CloseCurlyQuote]s fix that:"
}], "Text",ExpressionUUID->"ee64050e-4546-44c7-89a0-9c9d42c07d96"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"primersFwd", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<gttacaggtctca\>\"", ",", " ", "#"}], "]"}], "&"}], " ", "/@",
     " ", 
    RowBox[{"primers", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", "\"\<Fwd\>\""}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"primersRev", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<tcattgggtctct\>\"", ",", " ", "#"}], "]"}], "&"}], " ", "/@",
     " ", 
    RowBox[{"primers", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", "\"\<Rev\>\""}], "]"}], "]"}]}]}], 
  ";"}]}], "Code",
 InitializationCell->False,
 CellLabel->"In[9]:=",ExpressionUUID->"ab86683a-298b-4c6d-bf57-59d1439dd20f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Primer export", \
"Section",ExpressionUUID->"722003d6-f92b-490d-9177-69624e8c7043"],

Cell["\<\
Construct primer names composed of the direction and the target residue \
number:\
\>", "Text",ExpressionUUID->"cdd037ac-7461-43e4-a3f9-757d881e122d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"namesFwd", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<Fwd\>\"", ",", " ", 
       RowBox[{"ToString", "@", "#"}]}], "]"}], "&"}], " ", "/@", " ", 
    "targets"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"namesRev", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<Rev\>\"", ",", " ", 
       RowBox[{"ToString", "@", "#"}]}], "]"}], "&"}], " ", "/@", " ", 
    "targets"}]}], ";"}]}], "Code",
 InitializationCell->False,
 CellLabel->"In[11]:=",ExpressionUUID->"1fb38689-4b7c-4e5e-9490-18f34ef7aad5"],

Cell["\<\
Construct a table of name/sequence pairs and export as a spreadsheet:\
\>", "Text",ExpressionUUID->"8d6ba3f6-40a2-46db-859e-920308184471"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", "\[IndentingNewLine]", "  ", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
     "$HomeDirectory", ",", " ", "\"\<CysteineScreenPrimers.xlsx\>\""}], 
     "}"}], "]"}], ",", "\[IndentingNewLine]", "  ", 
   RowBox[{"\"\<Sheets\>\"", " ", "->", "\[IndentingNewLine]", "    ", 
    RowBox[{"{", "\[IndentingNewLine]", "      ", 
     RowBox[{
      RowBox[{"\"\<Fwd\>\"", " ", "->", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"namesFwd", ",", " ", "primersFwd"}], "}"}], "]"}]}], ",", 
      "\[IndentingNewLine]", "      ", 
      RowBox[{"\"\<Rev\>\"", " ", "->", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"namesRev", ",", " ", "primersRev"}], "}"}], "]"}]}]}], 
     "\[IndentingNewLine]", "    ", "}"}]}], "\[IndentingNewLine]", "    ", 
   ",", " ", "\"\<Rules\>\""}], "\[IndentingNewLine]", "]"}]], "Code",
 InitializationCell->False,
 CellLabel->"In[13]:=",ExpressionUUID->"c6ec53a4-de86-4256-8302-fbeacf1fd9a1"],

Cell[BoxData["\<\"C:\\\\Users\\\\Frank\\\\CysteineScreenPrimers.xlsx\"\>"], \
"Output",
 CellLabel->"Out[13]=",ExpressionUUID->"a61f6c05-f21d-4b16-8b37-044b0263103e"]
}, Open  ]],

Cell["Open the file and have a look:", \
"Text",ExpressionUUID->"85a44301-f0d6-4f7b-b0e5-ff05580718a9"],

Cell[BoxData[
 RowBox[{"SystemOpen", "@", "%"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"85c4a077-b3df-4abc-bd6a-d345927fd7f6"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1055, 1102},
WindowMargins->{{20, Automatic}, {Automatic, 74}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
TrackCellChangeTimes->False,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]

